// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NFCReader
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Dispatch
import Foundation
import MobileCoreServices
@_exported import NFCReader
import OpenSSL
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
open class Session {
  public static let `default`: NFCReader.Session
  final public let session: Foundation.URLSession
  final public let delegate: NFCReader.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: NFCReader.RequestInterceptor?
  final public let serverTrustManager: NFCReader.ServerTrustManager?
  final public let redirectHandler: NFCReader.RedirectHandler?
  final public let cachedResponseHandler: NFCReader.CachedResponseHandler?
  final public let eventMonitor: NFCReader.CompositeEventMonitor
  final public let defaultEventMonitors: [NFCReader.EventMonitor]
  public init(session: Foundation.URLSession, delegate: NFCReader.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: NFCReader.RequestInterceptor? = nil, serverTrustManager: NFCReader.ServerTrustManager? = nil, redirectHandler: NFCReader.RedirectHandler? = nil, cachedResponseHandler: NFCReader.CachedResponseHandler? = nil, eventMonitors: [NFCReader.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: NFCReader.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: NFCReader.RequestInterceptor? = nil, serverTrustManager: NFCReader.ServerTrustManager? = nil, redirectHandler: NFCReader.RedirectHandler? = nil, cachedResponseHandler: NFCReader.CachedResponseHandler? = nil, eventMonitors: [NFCReader.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<NFCReader.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, parameters: NFCReader.Parameters? = nil, encoding: NFCReader.ParameterEncoding = URLEncoding.default, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.DataRequest
  open func request<Parameters>(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, parameters: Parameters? = nil, encoder: NFCReader.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: NFCReader.URLRequestConvertible, interceptor: NFCReader.RequestInterceptor? = nil) -> NFCReader.DataRequest
  open func streamRequest<Parameters>(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, parameters: Parameters? = nil, encoder: NFCReader.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: NFCReader.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, headers: NFCReader.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.DataStreamRequest
  open func streamRequest(_ convertible: NFCReader.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: NFCReader.RequestInterceptor? = nil) -> NFCReader.DataStreamRequest
  open func download(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, parameters: NFCReader.Parameters? = nil, encoding: NFCReader.ParameterEncoding = URLEncoding.default, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil, to destination: NFCReader.DownloadRequest.Destination? = nil) -> NFCReader.DownloadRequest
  open func download<Parameters>(_ convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .get, parameters: Parameters? = nil, encoder: NFCReader.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, requestModifier: NFCReader.Session.RequestModifier? = nil, to destination: NFCReader.DownloadRequest.Destination? = nil) -> NFCReader.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: NFCReader.URLRequestConvertible, interceptor: NFCReader.RequestInterceptor? = nil, to destination: NFCReader.DownloadRequest.Destination? = nil) -> NFCReader.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: NFCReader.RequestInterceptor? = nil, to destination: NFCReader.DownloadRequest.Destination? = nil) -> NFCReader.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .post, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: NFCReader.URLRequestConvertible, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> NFCReader.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .post, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: NFCReader.URLRequestConvertible, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> NFCReader.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: NFCReader.URLConvertible, method: NFCReader.HTTPMethod = .post, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: NFCReader.URLRequestConvertible, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> NFCReader.UploadRequest
  open func upload(multipartFormData: @escaping (NFCReader.MultipartFormData) -> Swift.Void, to url: NFCReader.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: NFCReader.HTTPMethod = .post, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.UploadRequest
  open func upload(multipartFormData: @escaping (NFCReader.MultipartFormData) -> Swift.Void, with request: NFCReader.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> NFCReader.UploadRequest
  open func upload(multipartFormData: NFCReader.MultipartFormData, to url: NFCReader.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: NFCReader.HTTPMethod = .post, headers: NFCReader.HTTPHeaders? = nil, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: NFCReader.Session.RequestModifier? = nil) -> NFCReader.UploadRequest
  open func upload(multipartFormData: NFCReader.MultipartFormData, with request: NFCReader.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: NFCReader.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> NFCReader.UploadRequest
}
extension NFCReader.Session : NFCReader.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: NFCReader.Request)
  public func retryResult(for request: NFCReader.Request, dueTo error: NFCReader.AFError, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: NFCReader.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NFCReader.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [NFCReader.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: NFCReader.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: NFCReader.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: NFCReader.AlamofireExtension<Self.ExtendedType> { get set }
}
extension NFCReader.AlamofireExtended {
  public static var af: NFCReader.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: NFCReader.AlamofireExtension<Self> {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [NFCReader.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: NFCReader.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: NFCReader.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> NFCReader.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension NFCReader.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension NFCReader.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: NFCReader.HTTPHeader...)
  public typealias ArrayLiteralElement = NFCReader.HTTPHeader
}
extension NFCReader.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[NFCReader.HTTPHeader]>
}
extension NFCReader.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> NFCReader.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = NFCReader.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<NFCReader.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[NFCReader.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<NFCReader.HTTPHeaders>
}
extension NFCReader.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: NFCReader.HTTPHeader, b: NFCReader.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NFCReader.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NFCReader.HTTPHeader {
  public static func accept(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> NFCReader.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> NFCReader.HTTPHeader
  public static func authorization(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func contentType(_ value: Swift.String) -> NFCReader.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> NFCReader.HTTPHeader
}
extension NFCReader.HTTPHeaders {
  public static let `default`: NFCReader.HTTPHeaders
}
extension NFCReader.HTTPHeader {
  public static let defaultAcceptEncoding: NFCReader.HTTPHeader
  public static let defaultAcceptLanguage: NFCReader.HTTPHeader
  public static let defaultUserAgent: NFCReader.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: NFCReader.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: NFCReader.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: NFCReader.HTTPHeaders {
    get
    set
  }
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: NFCReader.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: NFCReader.CardAccess, tagReader: NFCReader.TagReader) throws
  public func doPACE(mrzKey: Swift.String, completed: @escaping (Swift.Bool) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : NFCReader.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
extension Swift.String {
  public func localized(in bundle: Foundation.Bundle?) -> Swift.String
  public func localizedFormat(arguments: Swift.CVarArg..., in bundle: Foundation.Bundle?) -> Swift.String
  public func localizedPlural(argument: Swift.CVarArg, in bundle: Foundation.Bundle?) -> Swift.String
}
extension NFCReader.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: NFCReader.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : NFCReader.EventMonitor {
  final public func requestDidResume(_ request: NFCReader.Request)
  final public func requestDidSuspend(_ request: NFCReader.Request)
  final public func requestDidCancel(_ request: NFCReader.Request)
  final public func requestDidFinish(_ request: NFCReader.Request)
  final public func request(_ request: NFCReader.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: NFCReader.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: NFCReader.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: NFCReader.Request, didCompleteTask task: Foundation.URLSessionTask, with error: NFCReader.AFError?)
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: NFCReader.PACEMappingType, b: NFCReader.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : NFCReader.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> NFCReader.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> NFCReader.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: NFCReader.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping NFCReader.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus, b: NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : NFCReader.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : NFCReader.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : NFCReader.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension NFCReader.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : NFCReader.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: NFCReader.URLConvertible, method: NFCReader.HTTPMethod, headers: NFCReader.HTTPHeaders? = nil) throws
}
public let LCLLanguageChangeNotification: Swift.String
public func Localized(_ string: Swift.String) -> Swift.String
public func Localized(_ string: Swift.String, arguments: Swift.CVarArg...) -> Swift.String
public func LocalizedPlural(_ string: Swift.String, argument: Swift.CVarArg) -> Swift.String
extension Swift.String {
  public func localized() -> Swift.String
  public func localizedFormat(_ arguments: Swift.CVarArg...) -> Swift.String
  public func localizedPlural(_ argument: Swift.CVarArg) -> Swift.String
  public func commented(_ argument: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers open class Localize : ObjectiveC.NSObject {
  open class func availableLanguages(_ excludeBase: Swift.Bool = false) -> [Swift.String]
  open class func currentLanguage() -> Swift.String
  open class func setCurrentLanguage(_ language: Swift.String)
  open class func defaultLanguage() -> Swift.String
  open class func resetCurrentLanguageToDefault()
  open class func displayNameForLanguage(_ language: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.URLSessionConfiguration : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension NFCReader.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
}
extension Foundation.URLRequest {
  public var method: NFCReader.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: NFCReader.Request.State, b: NFCReader.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: NFCReader.EventMonitor?
  final public let interceptor: NFCReader.RequestInterceptor?
  weak public var delegate: NFCReader.RequestDelegate? {
    get
  }
  public var state: NFCReader.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: NFCReader.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: NFCReader.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: NFCReader.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping NFCReader.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping NFCReader.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: NFCReader.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: NFCReader.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension NFCReader.Request : Swift.Equatable {
  public static func == (lhs: NFCReader.Request, rhs: NFCReader.Request) -> Swift.Bool
}
extension NFCReader.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NFCReader.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NFCReader.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: NFCReader.Request)
  func retryResult(for request: NFCReader.Request, dueTo error: NFCReader.AFError, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  func retryRequest(_ request: NFCReader.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : NFCReader.Request {
  final public let convertible: NFCReader.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping NFCReader.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : NFCReader.Request {
  public typealias Handler<Success, Failure> = (NFCReader.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: NFCReader.DataStreamRequest.Event<Success, Failure>
    public let token: NFCReader.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(NFCReader.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: NFCReader.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: NFCReader.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping NFCReader.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension NFCReader.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: NFCReader.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : NFCReader.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: NFCReader.DownloadRequest.Options
    public static let removePreviousFile: NFCReader.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = NFCReader.DownloadRequest.Options
    public typealias Element = NFCReader.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: NFCReader.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: NFCReader.DownloadRequest.Options = []) -> NFCReader.DownloadRequest.Destination
  public enum Downloadable {
    case request(NFCReader.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: NFCReader.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping NFCReader.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : NFCReader.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: NFCReader.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: NFCReader.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> NFCReader.UploadRequest.Uploadable
}
extension NFCReader.UploadRequest.Uploadable : NFCReader.UploadableConvertible {
  public func createUploadable() throws -> NFCReader.UploadRequest.Uploadable
}
public protocol UploadConvertible : NFCReader.URLRequestConvertible, NFCReader.UploadableConvertible {
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : NFCReader.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: NFCReader.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: NFCReader.AuthenticationError, b: NFCReader.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : NFCReader.RequestInterceptor where AuthenticatorType : NFCReader.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: NFCReader.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: NFCReader.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: NFCReader.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: NFCReader.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  @objc deinit
}
@available(iOS 13, *)
public protocol NFCDelegate {
  func NFCNotAvaiable()
  func NFCMessageDisplay(_ messages: NFCReader.NFCViewDisplayMessage) -> Swift.String
  func NFCSuccess(data: [Swift.String : Any])
  func NFCSuccess(model: NFCReader.NFCPassportModel)
  func NFCFail(_ error: NFCReader.NFCPassportReaderError)
  func VerifySuccess(jsonData: NFCReader.JSON)
  func VerifyFail(_ error: NFCReader.AFError)
}
@available(iOS 13, *)
public class NFCManager {
  public init()
  public func setDomainURL(_ url: Swift.String?)
  public func setToken(_ token: Swift.String?)
  public func getToken() -> Swift.String?
  public func getTransactionCode() -> Swift.String?
  public func setCode(_ code: Swift.String?)
  public func getCode() -> Swift.String?
  public func setAcceptLanguage(_ aLanguage: Swift.String?)
  public func getAcceptLanguage() -> Swift.String?
  public func setBackgroundColor(_ red: CoreFoundation.CGFloat, _ green: CoreFoundation.CGFloat, _ blue: CoreFoundation.CGFloat, _ alpha: CoreFoundation.CGFloat = 1.0)
  public func getBackgroundColor() -> UIKit.UIColor?
  public func setFontColor(_ red: CoreFoundation.CGFloat, _ green: CoreFoundation.CGFloat, _ blue: CoreFoundation.CGFloat, _ alpha: CoreFoundation.CGFloat = 1.0)
  public func getFontColor() -> UIKit.UIColor?
  public func setFontName(_ name: Swift.String)
  public func getFontName() -> Swift.String?
  public func setLanguage(_ language: Swift.String = "en")
  public var delegate: NFCReader.NFCDelegate?
  public init(dateOfBirthYYMMDD: Swift.String = "", dateOfExpireYYMMDD: Swift.String = "", cardID: Swift.String = "", isCheckBCA: Swift.Bool = true)
  public func scanPassport()
  @objc deinit
}
extension Swift.String {
  public func localized(using tableName: Swift.String?, in bundle: Foundation.Bundle?) -> Swift.String
  public func localizedFormat(arguments: Swift.CVarArg..., using tableName: Swift.String?, in bundle: Foundation.Bundle?) -> Swift.String
  public func localizedPlural(argument: Swift.CVarArg, using tableName: Swift.String?, in bundle: Foundation.Bundle?) -> Swift.String
}
public protocol Message {
  var data: Foundation.Data { get }
  var base64String: Swift.String { get }
  init(data: Foundation.Data)
  init(base64Encoded base64String: Swift.String) throws
}
extension NFCReader.Message {
  public var base64String: Swift.String {
    get
  }
  public init(base64Encoded base64String: Swift.String) throws
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> NFCReader.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> NFCReader.ASN1Item
  public func test()
  @objc deinit
}
extension Foundation.Data {
  public func prependx509Header() -> Foundation.Data
  public func hasX509Header() throws -> Swift.Bool
  public func isAnHeaderlessKey() throws -> Swift.Bool
}
public typealias AFResult<Success> = Swift.Result<Success, NFCReader.AFError>
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : NFCReader.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
extension NFCReader.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension NFCReader.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> NFCReader.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension NFCReader.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> NFCReader.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension NFCReader.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> NFCReader.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@_hasMissingDesignatedInitializers public class APIResponse {
  @objc deinit
}
extension NFCReader.APIResponse : Swift.CustomStringConvertible {
  @objc dynamic public var description: Swift.String {
    @objc get
  }
}
public typealias Padding = Security.SecPadding
public enum SwiftyRSA {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  public static func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> (privateKey: NFCReader.PrivateKey, publicKey: NFCReader.PublicKey)
}
public class EncryptedMessage : NFCReader.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  public func decrypted(with key: NFCReader.PrivateKey, padding: NFCReader.Padding) throws -> NFCReader.ClearMessage
  @objc deinit
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : NFCReader.ParameterEncoder {
  public static var `default`: NFCReader.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: NFCReader.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: NFCReader.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
open class URLEncodedFormParameterEncoder : NFCReader.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: NFCReader.URLEncodedFormParameterEncoder.Destination, b: NFCReader.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: NFCReader.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: NFCReader.URLEncodedFormEncoder
  final public let destination: NFCReader.URLEncodedFormParameterEncoder.Destination
  public init(encoder: NFCReader.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: NFCReader.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : NFCReader.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : NFCReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: NFCReader.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: NFCReader.Request, didFailToCreateURLRequestWithError error: NFCReader.AFError)
  func request(_ request: NFCReader.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: NFCReader.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: NFCReader.AFError)
  func request(_ request: NFCReader.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: NFCReader.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: NFCReader.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: NFCReader.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: NFCReader.AFError)
  func request(_ request: NFCReader.Request, didCompleteTask task: Foundation.URLSessionTask, with error: NFCReader.AFError?)
  func requestIsRetrying(_ request: NFCReader.Request)
  func requestDidFinish(_ request: NFCReader.Request)
  func requestDidResume(_ request: NFCReader.Request)
  func request(_ request: NFCReader.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: NFCReader.Request)
  func request(_ request: NFCReader.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: NFCReader.Request)
  func request(_ request: NFCReader.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: NFCReader.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: NFCReader.Request.ValidationResult)
  func request(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Foundation.Data?, NFCReader.AFError>)
  func request<Value>(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Value, NFCReader.AFError>)
  func request(_ request: NFCReader.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: NFCReader.Request.ValidationResult)
  func request<Value>(_ request: NFCReader.DataStreamRequest, didParseStream result: Swift.Result<Value, NFCReader.AFError>)
  func request(_ request: NFCReader.UploadRequest, didCreateUploadable uploadable: NFCReader.UploadRequest.Uploadable)
  func request(_ request: NFCReader.UploadRequest, didFailToCreateUploadableWithError error: NFCReader.AFError)
  func request(_ request: NFCReader.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: NFCReader.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, NFCReader.AFError>)
  func request(_ request: NFCReader.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: NFCReader.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: NFCReader.Request.ValidationResult)
  func request(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Foundation.URL?, NFCReader.AFError>)
  func request<Value>(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Value, NFCReader.AFError>)
}
extension NFCReader.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: NFCReader.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: NFCReader.Request, didFailToCreateURLRequestWithError error: NFCReader.AFError)
  public func request(_ request: NFCReader.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: NFCReader.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: NFCReader.AFError)
  public func request(_ request: NFCReader.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: NFCReader.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: NFCReader.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: NFCReader.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: NFCReader.AFError)
  public func request(_ request: NFCReader.Request, didCompleteTask task: Foundation.URLSessionTask, with error: NFCReader.AFError?)
  public func requestIsRetrying(_ request: NFCReader.Request)
  public func requestDidFinish(_ request: NFCReader.Request)
  public func requestDidResume(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: NFCReader.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: NFCReader.Request.ValidationResult)
  public func request(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Foundation.Data?, NFCReader.AFError>)
  public func request<Value>(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Value, NFCReader.AFError>)
  public func request(_ request: NFCReader.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: NFCReader.Request.ValidationResult)
  public func request<Value>(_ request: NFCReader.DataStreamRequest, didParseStream result: Swift.Result<Value, NFCReader.AFError>)
  public func request(_ request: NFCReader.UploadRequest, didCreateUploadable uploadable: NFCReader.UploadRequest.Uploadable)
  public func request(_ request: NFCReader.UploadRequest, didFailToCreateUploadableWithError error: NFCReader.AFError)
  public func request(_ request: NFCReader.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: NFCReader.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, NFCReader.AFError>)
  public func request(_ request: NFCReader.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: NFCReader.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: NFCReader.Request.ValidationResult)
  public func request(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Foundation.URL?, NFCReader.AFError>)
  public func request<Value>(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Value, NFCReader.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : NFCReader.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: NFCReader.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: NFCReader.Request, didFailToCreateURLRequestWithError error: NFCReader.AFError)
  final public func request(_ request: NFCReader.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: NFCReader.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: NFCReader.AFError)
  final public func request(_ request: NFCReader.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: NFCReader.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: NFCReader.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: NFCReader.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: NFCReader.AFError)
  final public func request(_ request: NFCReader.Request, didCompleteTask task: Foundation.URLSessionTask, with error: NFCReader.AFError?)
  final public func requestIsRetrying(_ request: NFCReader.Request)
  final public func requestDidFinish(_ request: NFCReader.Request)
  final public func requestDidResume(_ request: NFCReader.Request)
  final public func request(_ request: NFCReader.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: NFCReader.Request)
  final public func request(_ request: NFCReader.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: NFCReader.Request)
  final public func request(_ request: NFCReader.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: NFCReader.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: NFCReader.Request.ValidationResult)
  final public func request(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Foundation.Data?, NFCReader.AFError>)
  final public func request<Value>(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Value, NFCReader.AFError>)
  final public func request(_ request: NFCReader.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: NFCReader.Request.ValidationResult)
  final public func request<Value>(_ request: NFCReader.DataStreamRequest, didParseStream result: Swift.Result<Value, NFCReader.AFError>)
  final public func request(_ request: NFCReader.UploadRequest, didCreateUploadable uploadable: NFCReader.UploadRequest.Uploadable)
  final public func request(_ request: NFCReader.UploadRequest, didFailToCreateUploadableWithError error: NFCReader.AFError)
  final public func request(_ request: NFCReader.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: NFCReader.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, NFCReader.AFError>)
  final public func request(_ request: NFCReader.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: NFCReader.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: NFCReader.Request.ValidationResult)
  final public func request(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Foundation.URL?, NFCReader.AFError>)
  final public func request<Value>(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Value, NFCReader.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : NFCReader.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((NFCReader.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((NFCReader.Request, NFCReader.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((NFCReader.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((NFCReader.Request, Foundation.URLRequest, NFCReader.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((NFCReader.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((NFCReader.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((NFCReader.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((NFCReader.Request, Foundation.URLSessionTask, NFCReader.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((NFCReader.Request, Foundation.URLSessionTask, NFCReader.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((NFCReader.Request) -> Swift.Void)?
  open var requestDidFinish: ((NFCReader.Request) -> Swift.Void)?
  open var requestDidResume: ((NFCReader.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((NFCReader.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((NFCReader.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((NFCReader.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((NFCReader.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((NFCReader.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((NFCReader.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, NFCReader.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((NFCReader.DataRequest, NFCReader.DataResponse<Foundation.Data?, NFCReader.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((NFCReader.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, NFCReader.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((NFCReader.UploadRequest, NFCReader.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((NFCReader.UploadRequest, NFCReader.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((NFCReader.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((NFCReader.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, NFCReader.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((NFCReader.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((NFCReader.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, NFCReader.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((NFCReader.DownloadRequest, NFCReader.DownloadResponse<Foundation.URL?, NFCReader.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: NFCReader.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: NFCReader.Request, didFailToCreateURLRequestWithError error: NFCReader.AFError)
  open func request(_ request: NFCReader.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: NFCReader.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: NFCReader.AFError)
  open func request(_ request: NFCReader.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: NFCReader.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: NFCReader.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: NFCReader.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: NFCReader.AFError)
  open func request(_ request: NFCReader.Request, didCompleteTask task: Foundation.URLSessionTask, with error: NFCReader.AFError?)
  open func requestIsRetrying(_ request: NFCReader.Request)
  open func requestDidFinish(_ request: NFCReader.Request)
  open func requestDidResume(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: NFCReader.Request)
  public func request(_ request: NFCReader.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: NFCReader.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: NFCReader.Request.ValidationResult)
  open func request(_ request: NFCReader.DataRequest, didParseResponse response: NFCReader.DataResponse<Foundation.Data?, NFCReader.AFError>)
  public func request(_ request: NFCReader.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: NFCReader.Request.ValidationResult)
  open func request(_ request: NFCReader.UploadRequest, didCreateUploadable uploadable: NFCReader.UploadRequest.Uploadable)
  open func request(_ request: NFCReader.UploadRequest, didFailToCreateUploadableWithError error: NFCReader.AFError)
  open func request(_ request: NFCReader.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: NFCReader.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, NFCReader.AFError>)
  open func request(_ request: NFCReader.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: NFCReader.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: NFCReader.Request.ValidationResult)
  open func request(_ request: NFCReader.DownloadRequest, didParseResponse response: NFCReader.DownloadResponse<Foundation.URL?, NFCReader.AFError>)
  @objc deinit
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: NFCReader.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : NFCReader.RequestAdapter, NFCReader.RequestRetrier {
}
extension NFCReader.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: NFCReader.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, NFCReader.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (NFCReader.Request, NFCReader.Session, Swift.Error, _ completion: @escaping (NFCReader.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : NFCReader.RequestInterceptor {
  public init(_ adaptHandler: @escaping NFCReader.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: NFCReader.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
open class Retrier : NFCReader.RequestInterceptor {
  public init(_ retryHandler: @escaping NFCReader.RetryHandler)
  open func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  @objc deinit
}
open class Interceptor : NFCReader.RequestInterceptor {
  final public let adapters: [NFCReader.RequestAdapter]
  final public let retriers: [NFCReader.RequestRetrier]
  public init(adaptHandler: @escaping NFCReader.AdaptHandler, retryHandler: @escaping NFCReader.RetryHandler)
  public init(adapter: NFCReader.RequestAdapter, retrier: NFCReader.RequestRetrier)
  public init(adapters: [NFCReader.RequestAdapter] = [], retriers: [NFCReader.RequestRetrier] = [], interceptors: [NFCReader.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: NFCReader.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : NFCReader.DataGroup {
  public var securityInfos: [NFCReader.SecurityInfo] {
    get
  }
  @objc deinit
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: NFCReader.URLEncodedFormEncoder.ArrayEncoding, b: NFCReader.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: NFCReader.URLEncodedFormEncoder.BoolEncoding, b: NFCReader.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: NFCReader.URLEncodedFormEncoder.SpaceEncoding, b: NFCReader.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: NFCReader.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: NFCReader.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: NFCReader.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: NFCReader.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: NFCReader.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: NFCReader.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: NFCReader.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: NFCReader.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: NFCReader.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: NFCReader.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: NFCReader.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: NFCReader.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : NFCReader.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(NFCReader.DataGroupId, Swift.Int)
  case error(NFCReader.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : NFCReader.DataGroup {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : NFCReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: NFCReader.URLRequestConvertible, with parameters: NFCReader.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : NFCReader.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: NFCReader.URLEncoding.Destination, b: NFCReader.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    public static func == (a: NFCReader.URLEncoding.ArrayEncoding, b: NFCReader.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: NFCReader.URLEncoding.BoolEncoding, b: NFCReader.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: NFCReader.URLEncoding {
    get
  }
  public static var queryString: NFCReader.URLEncoding {
    get
  }
  public static var httpBody: NFCReader.URLEncoding {
    get
  }
  public let destination: NFCReader.URLEncoding.Destination
  public let arrayEncoding: NFCReader.URLEncoding.ArrayEncoding
  public let boolEncoding: NFCReader.URLEncoding.BoolEncoding
  public init(destination: NFCReader.URLEncoding.Destination = .methodDependent, arrayEncoding: NFCReader.URLEncoding.ArrayEncoding = .brackets, boolEncoding: NFCReader.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: NFCReader.URLRequestConvertible, with parameters: NFCReader.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : NFCReader.ParameterEncoding {
  public static var `default`: NFCReader.JSONEncoding {
    get
  }
  public static var prettyPrinted: NFCReader.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: NFCReader.URLRequestConvertible, with parameters: NFCReader.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: NFCReader.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = NFCReader.DataResponse<Value, NFCReader.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: NFCReader.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : NFCReader.ResponseSerializer
  public init<Serializer>(_ request: NFCReader.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : NFCReader.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, NFCReader.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, NFCReader.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == NFCReader.DataResponse<Value, NFCReader.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension NFCReader.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: NFCReader.DataRequest, queue: Dispatch.DispatchQueue)
}
extension NFCReader.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> NFCReader.DataResponsePublisher<T> where Serializer : NFCReader.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> NFCReader.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> NFCReader.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: NFCReader.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<NFCReader.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> NFCReader.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> NFCReader.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = NFCReader.DataStreamRequest.Stream<Value, NFCReader.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: NFCReader.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : NFCReader.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, NFCReader.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, NFCReader.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == NFCReader.DataStreamRequest.Stream<Value, NFCReader.AFError>
}
extension NFCReader.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> NFCReader.DataStreamPublisher<Serializer.SerializedObject> where Serializer : NFCReader.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> NFCReader.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> NFCReader.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: NFCReader.DataDecoder = JSONDecoder(), preprocessor: NFCReader.DataPreprocessor = PassthroughPreprocessor()) -> NFCReader.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = NFCReader.DownloadResponse<Value, NFCReader.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: NFCReader.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : NFCReader.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: NFCReader.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : NFCReader.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, NFCReader.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, NFCReader.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == NFCReader.DownloadResponse<Value, NFCReader.AFError>
}
extension NFCReader.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> NFCReader.DownloadResponsePublisher<T> where Serializer : NFCReader.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> NFCReader.DownloadResponsePublisher<T> where Serializer : NFCReader.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> NFCReader.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> NFCReader.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> NFCReader.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: NFCReader.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: NFCReader.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<NFCReader.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> NFCReader.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension NFCReader.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: NFCReader.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension NFCReader.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> NFCReader.DownloadResponsePublisher<Foundation.URL?>
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: NFCReader.CertificateType, b: NFCReader.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [NFCReader.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: NFCReader.DataGroupId
  public var rangTime: Swift.Double
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@IBDesignable extension UIKit.UILabel {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var localizeKey: Swift.String? {
    @objc get
    @objc set
  }
}
@IBDesignable extension UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var localizeKey: Swift.String? {
    @objc get
    @objc set
  }
}
@IBDesignable extension UIKit.UITextView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var localizeKey: Swift.String? {
    @objc get
    @objc set
  }
}
@IBDesignable extension UIKit.UITextField {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var localizeKey: Swift.String? {
    @objc get
    @objc set
  }
}
@IBDesignable extension UIKit.UINavigationItem {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var localizeKey: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : NFCReader.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
public protocol Key : AnyObject {
  var reference: Security.SecKey { get }
  var originalData: Foundation.Data? { get }
  init(data: Foundation.Data) throws
  init(reference: Security.SecKey) throws
  init(base64Encoded base64String: Swift.String) throws
  init(pemEncoded pemString: Swift.String) throws
  init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  func pemString() throws -> Swift.String
  func data() throws -> Foundation.Data
  func base64String() throws -> Swift.String
}
extension NFCReader.Key {
  public func base64String() throws -> Swift.String
  public func data() throws -> Foundation.Data
  public init(base64Encoded base64String: Swift.String) throws
  public init(pemEncoded pemString: Swift.String) throws
  public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
  public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle = Bundle.main) throws
}
public class PublicKey : NFCReader.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  public static func publicKeys(pemEncoded pemString: Swift.String) -> [NFCReader.PublicKey]
  @objc deinit
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : NFCReader.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : NFCReader.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> NFCReader.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: NFCReader.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: NFCReader.RevocationTrustEvaluator.Options
    public static let ocsp: NFCReader.RevocationTrustEvaluator.Options
    public static let preferCRL: NFCReader.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: NFCReader.RevocationTrustEvaluator.Options
    public static let any: NFCReader.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = NFCReader.RevocationTrustEvaluator.Options
    public typealias Element = NFCReader.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: NFCReader.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PinnedCertificatesTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class PublicKeysTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class CompositeTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public init(evaluators: [NFCReader.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = NFCReader.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : NFCReader.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == NFCReader.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension NFCReader.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension NFCReader.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension NFCReader.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: NFCReader.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension NFCReader.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension NFCReader.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension NFCReader.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : NFCReader.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension NFCReader.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : NFCReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
public typealias AFDataResponse<Success> = NFCReader.DataResponse<Success, NFCReader.AFError>
public typealias AFDownloadResponse<Success> = NFCReader.DownloadResponse<Success, NFCReader.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension NFCReader.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NFCReader.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> NFCReader.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> NFCReader.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> NFCReader.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> NFCReader.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension NFCReader.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NFCReader.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> NFCReader.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> NFCReader.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> NFCReader.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> NFCReader.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: NFCReader.PassportAuthenticationStatus, b: NFCReader.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: NFCReader.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: NFCReader.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [NFCReader.DataGroupId] {
    get
  }
  public var dataGroupsRead: [NFCReader.DataGroupId : NFCReader.DataGroup] {
    get
  }
  public var dataGroupHashes: [NFCReader.DataGroupId : NFCReader.DataGroupHash] {
    get
  }
  public var cardAccess: NFCReader.CardAccess? {
    get
  }
  public var BACStatus: NFCReader.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: NFCReader.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: NFCReader.PassportAuthenticationStatus {
    get
  }
  public var chipActiveData: Foundation.Data {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: NFCReader.DataGroupId, dataGroup: NFCReader.DataGroup)
  public func getDataGroup(_ id: NFCReader.DataGroupId) -> NFCReader.DataGroup?
  public func dumpPassportData(selectedDataGroups: [NFCReader.DataGroupId], includeActiveAuthenticationData: Swift.Bool = true) -> [Swift.String : Swift.String]
  public func getTimeReader(selectedDataGroups: [NFCReader.DataGroupId]) -> [Swift.String : Any]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [NFCReader.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: NFCReader.SecureMessagingSupportedAlgorithms, b: NFCReader.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: NFCReader.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: NFCReader.Redirector
  public static let doNotFollow: NFCReader.Redirector
  public let behavior: NFCReader.Redirector.Behavior
  public init(behavior: NFCReader.Redirector.Behavior)
}
extension NFCReader.Redirector : NFCReader.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
extension Swift.String {
  public func localized(using tableName: Swift.String?) -> Swift.String
  public func localizedFormat(arguments: Swift.CVarArg..., using tableName: Swift.String?) -> Swift.String
  public func localizedPlural(argument: Swift.CVarArg, using tableName: Swift.String?) -> Swift.String
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [NFCReader.SecurityInfo] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> NFCReader.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NFCReader.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [NFCReader.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NFCReader.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: NFCReader.JSON) throws
  public func merged(with other: NFCReader.JSON) throws -> NFCReader.JSON
  public var type: NFCReader.`Type` {
    get
  }
  public var error: NFCReader.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: NFCReader.JSON {
    get
  }
  public static var null: NFCReader.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: NFCReader.Index<T>, rhs: NFCReader.Index<T>) -> Swift.Bool
  public static func < (lhs: NFCReader.Index<T>, rhs: NFCReader.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = NFCReader.Index<NFCReader.JSON>
public typealias JSONRawIndex = NFCReader.Index<Any>
extension NFCReader.JSON : Swift.Collection {
  public typealias Index = NFCReader.JSONRawIndex
  public var startIndex: NFCReader.JSON.Index {
    get
  }
  public var endIndex: NFCReader.JSON.Index {
    get
  }
  public func index(after i: NFCReader.JSON.Index) -> NFCReader.JSON.Index
  public subscript(position: NFCReader.JSON.Index) -> (Swift.String, NFCReader.JSON) {
    get
  }
  public typealias Element = (Swift.String, NFCReader.JSON)
  public typealias Indices = Swift.DefaultIndices<NFCReader.JSON>
  public typealias Iterator = Swift.IndexingIterator<NFCReader.JSON>
  public typealias SubSequence = Swift.Slice<NFCReader.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: NFCReader.JSONKey { get }
}
extension Swift.Int : NFCReader.JSONSubscriptType {
  public var jsonKey: NFCReader.JSONKey {
    get
  }
}
extension Swift.String : NFCReader.JSONSubscriptType {
  public var jsonKey: NFCReader.JSONKey {
    get
  }
}
extension NFCReader.JSON {
  public subscript(path: [NFCReader.JSONSubscriptType]) -> NFCReader.JSON {
    get
    set
  }
  public subscript(path: NFCReader.JSONSubscriptType...) -> NFCReader.JSON {
    get
    set
  }
}
extension NFCReader.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension NFCReader.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension NFCReader.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension NFCReader.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension NFCReader.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension NFCReader.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension NFCReader.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [NFCReader.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension NFCReader.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NFCReader.JSON {
  public var array: [NFCReader.JSON]? {
    get
  }
  public var arrayValue: [NFCReader.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension NFCReader.JSON {
  public var dictionary: [Swift.String : NFCReader.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : NFCReader.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension NFCReader.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension NFCReader.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension NFCReader.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension NFCReader.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension NFCReader.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension NFCReader.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension NFCReader.JSON : Swift.Comparable {
}
public func == (lhs: NFCReader.JSON, rhs: NFCReader.JSON) -> Swift.Bool
public func <= (lhs: NFCReader.JSON, rhs: NFCReader.JSON) -> Swift.Bool
public func >= (lhs: NFCReader.JSON, rhs: NFCReader.JSON) -> Swift.Bool
public func > (lhs: NFCReader.JSON, rhs: NFCReader.JSON) -> Swift.Bool
public func < (lhs: NFCReader.JSON, rhs: NFCReader.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: NFCReader.writingOptionsKeys, b: NFCReader.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NFCReader.JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(NFCReader.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: NFCReader.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: NFCReader.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: NFCReader.AFError.ServerTrustFailureReason.Output, options: NFCReader.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: NFCReader.URLConvertible)
  case multipartEncodingFailed(reason: NFCReader.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: NFCReader.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: NFCReader.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: NFCReader.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: NFCReader.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: NFCReader.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: NFCReader.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: NFCReader.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> NFCReader.AFError
}
extension NFCReader.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension NFCReader.AFError {
  public var urlConvertible: NFCReader.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension NFCReader.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension NFCReader.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension NFCReader.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension NFCReader.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension NFCReader.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case Timeout
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension NFCReader.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public class Signature {
  public enum DigestType {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public static func == (a: NFCReader.Signature.DigestType, b: NFCReader.Signature.DigestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let data: Foundation.Data
  public init(data: Foundation.Data)
  convenience public init(base64Encoded base64String: Swift.String) throws
  public var base64String: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: NFCReader.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (_ error: NFCReader.NFCPassportReaderError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public class ClearMessage : NFCReader.Message {
  final public let data: Foundation.Data
  required public init(data: Foundation.Data)
  convenience public init(string: Swift.String, using encoding: Swift.String.Encoding) throws
  public func string(encoding: Swift.String.Encoding) throws -> Swift.String
  public func encrypted(with key: NFCReader.PublicKey, padding: NFCReader.Padding) throws -> NFCReader.EncryptedMessage
  public func signed(with key: NFCReader.PrivateKey, digestType: NFCReader.Signature.DigestType) throws -> NFCReader.Signature
  public func verify(with key: NFCReader.PublicKey, signature: NFCReader.Signature, digestType: NFCReader.Signature.DigestType) throws -> Swift.Bool
  @objc deinit
}
public let AF: NFCReader.Session
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: NFCReader.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  public func readPassport(mrzKey: Swift.String, tags: [NFCReader.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((NFCReader.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (NFCReader.NFCPassportModel?, NFCReader.NFCPassportReaderError?) -> ())
  @objc deinit
}
@available(iOS 13, *)
extension NFCReader.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: NFCReader.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : NFCReader.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: NFCReader.HTTPMethod
  public static let delete: NFCReader.HTTPMethod
  public static let get: NFCReader.HTTPMethod
  public static let head: NFCReader.HTTPMethod
  public static let options: NFCReader.HTTPMethod
  public static let patch: NFCReader.HTTPMethod
  public static let post: NFCReader.HTTPMethod
  public static let put: NFCReader.HTTPMethod
  public static let trace: NFCReader.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : NFCReader.DataResponseSerializerProtocol, NFCReader.DownloadResponseSerializerProtocol {
  var dataPreprocessor: NFCReader.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : NFCReader.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : NFCReader.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension NFCReader.ResponseSerializer {
  public static var defaultDataPreprocessor: NFCReader.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: NFCReader.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension NFCReader.DownloadResponseSerializerProtocol where Self : NFCReader.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension NFCReader.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (NFCReader.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (NFCReader.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : NFCReader.DataResponseSerializerProtocol
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (NFCReader.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (NFCReader.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : NFCReader.DownloadResponseSerializerProtocol
}
public struct URLResponseSerializer : NFCReader.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (NFCReader.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : NFCReader.ResponseSerializer {
  final public let dataPreprocessor: NFCReader.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod>
  public init(dataPreprocessor: NFCReader.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension NFCReader.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : NFCReader.ResponseSerializer {
  final public let dataPreprocessor: NFCReader.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod>
  public init(dataPreprocessor: NFCReader.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension NFCReader.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
final public class JSONResponseSerializer : NFCReader.ResponseSerializer {
  final public let dataPreprocessor: NFCReader.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: NFCReader.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension NFCReader.DataRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (NFCReader.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (NFCReader.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: NFCReader.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension NFCReader.Empty : NFCReader.EmptyResponse {
  public static func emptyValue() -> NFCReader.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : NFCReader.DataDecoder {
}
extension Foundation.PropertyListDecoder : NFCReader.DataDecoder {
}
final public class DecodableResponseSerializer<T> : NFCReader.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: NFCReader.DataPreprocessor
  final public let decoder: NFCReader.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod>
  public init(dataPreprocessor: NFCReader.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: NFCReader.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension NFCReader.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: NFCReader.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension NFCReader.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: NFCReader.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: NFCReader.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<NFCReader.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (NFCReader.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : NFCReader.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: NFCReader.DataDecoder
  public let dataPreprocessor: NFCReader.DataPreprocessor
  public init(decoder: NFCReader.DataDecoder = JSONDecoder(), dataPreprocessor: NFCReader.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : NFCReader.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : NFCReader.DataStreamSerializer {
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension NFCReader.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping NFCReader.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping NFCReader.DataStreamRequest.Handler<Serializer.SerializedObject, NFCReader.AFError>) -> Self where Serializer : NFCReader.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping NFCReader.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: NFCReader.DataDecoder = JSONDecoder(), preprocessor: NFCReader.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping NFCReader.DataStreamRequest.Handler<T, NFCReader.AFError>) -> Self where T : Swift.Decodable
}
public enum SwiftyRSAError : Swift.Error {
  case pemDoesNotContainKey
  case keyRepresentationFailed(error: CoreFoundation.CFError?)
  case keyGenerationFailed(error: CoreFoundation.CFError?)
  case keyCreateFailed(error: CoreFoundation.CFError?)
  case keyAddFailed(status: Darwin.OSStatus)
  case keyCopyFailed(status: Darwin.OSStatus)
  case tagEncodingFailed
  case asn1ParsingFailed
  case invalidAsn1RootNode
  case invalidAsn1Structure
  case invalidBase64String
  case chunkDecryptFailed(index: Swift.Int)
  case chunkEncryptFailed(index: Swift.Int)
  case stringToDataConversionFailed
  case dataToStringConversionFailed
  case invalidDigestSize(digestSize: Swift.Int, maxChunkSize: Swift.Int)
  case signatureCreateFailed(status: Darwin.OSStatus)
  case signatureVerifyFailed(status: Darwin.OSStatus)
  case pemFileNotFound(name: Swift.String)
  case derFileNotFound(name: Swift.String)
  case notAPublicKey
  case notAPrivateKey
  case x509CertificateFailed
}
extension NFCReader.SwiftyRSAError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
open class RetryPolicy : NFCReader.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<NFCReader.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<NFCReader.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<NFCReader.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: NFCReader.Request, for session: NFCReader.Session, dueTo error: Swift.Error, completion: @escaping (NFCReader.RetryResult) -> Swift.Void)
  open func shouldRetry(request: NFCReader.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
open class ConnectionLostRetryPolicy : NFCReader.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<NFCReader.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : NFCReader.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: NFCReader.ResponseCacher
  public static let doNotCache: NFCReader.ResponseCacher
  public let behavior: NFCReader.ResponseCacher.Behavior
  public init(behavior: NFCReader.ResponseCacher.Behavior)
}
extension NFCReader.ResponseCacher : NFCReader.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc(KeyPair) public class _objc_KeyPair : ObjectiveC.NSObject {
  @objc final public let privateKey: NFCReader._objc_PrivateKey
  @objc final public let publicKey: NFCReader._objc_PublicKey
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SwiftyRSA) public class _objc_SwiftyRSA : ObjectiveC.NSObject {
  @available(iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  @objc public class func generateRSAKeyPair(sizeInBits size: Swift.Int) throws -> NFCReader._objc_KeyPair
  @objc override dynamic public init()
  @objc deinit
}
@objc(PublicKey) public class _objc_PublicKey : ObjectiveC.NSObject, NFCReader.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: NFCReader.PublicKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc public static func publicKeys(pemEncoded pemString: Swift.String) -> [NFCReader._objc_PublicKey]
  @objc deinit
}
@objc(PrivateKey) public class _objc_PrivateKey : ObjectiveC.NSObject, NFCReader.Key {
  @objc public var reference: Security.SecKey {
    @objc get
  }
  @objc public var originalData: Foundation.Data? {
    @objc get
  }
  @objc public func pemString() throws -> Swift.String
  @objc public func data() throws -> Foundation.Data
  @objc public func base64String() throws -> Swift.String
  required public init(swiftValue: NFCReader.PrivateKey)
  @objc required public init(data: Foundation.Data) throws
  @objc required public init(reference: Security.SecKey) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc required public init(pemEncoded pemString: Swift.String) throws
  @objc required public init(pemNamed pemName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc required public init(derNamed derName: Swift.String, in bundle: Foundation.Bundle) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(VerificationResult) public class _objc_VerificationResult : ObjectiveC.NSObject {
  @objc final public let isSuccessful: Swift.Bool
  @objc deinit
}
@objc(ClearMessage) public class _objc_ClearMessage : ObjectiveC.NSObject, NFCReader.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: NFCReader.ClearMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(string: Swift.String, using rawEncoding: Swift.UInt) throws
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func string(encoding rawEncoding: Swift.UInt) throws -> Swift.String
  @objc public func encrypted(with key: NFCReader._objc_PublicKey, padding: NFCReader.Padding) throws -> NFCReader._objc_EncryptedMessage
  @objc public func signed(with key: NFCReader._objc_PrivateKey, digestType: NFCReader._objc_Signature.DigestType) throws -> NFCReader._objc_Signature
  @objc public func verify(with key: NFCReader._objc_PublicKey, signature: NFCReader._objc_Signature, digestType: NFCReader._objc_Signature.DigestType) throws -> NFCReader._objc_VerificationResult
  @objc deinit
}
@objc(EncryptedMessage) public class _objc_EncryptedMessage : ObjectiveC.NSObject, NFCReader.Message {
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: NFCReader.EncryptedMessage)
  @objc required public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc public func decrypted(with key: NFCReader._objc_PrivateKey, padding: NFCReader.Padding) throws -> NFCReader._objc_ClearMessage
  @objc deinit
}
@objc(Signature) public class _objc_Signature : ObjectiveC.NSObject {
  @objc public enum DigestType : Swift.Int {
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var base64String: Swift.String {
    @objc get
  }
  @objc public var data: Foundation.Data {
    @objc get
  }
  required public init(swiftValue: NFCReader.Signature)
  @objc public init(data: Foundation.Data)
  @objc required public init(base64Encoded base64String: Swift.String) throws
  @objc deinit
}
public class PrivateKey : NFCReader.Key {
  final public let reference: Security.SecKey
  final public let originalData: Foundation.Data?
  public func pemString() throws -> Swift.String
  required public init(reference: Security.SecKey) throws
  required public init(data: Foundation.Data) throws
  @objc deinit
}
extension NFCReader.LogLevel : Swift.Equatable {}
extension NFCReader.LogLevel : Swift.Hashable {}
extension NFCReader.LogLevel : Swift.RawRepresentable {}
extension NFCReader.PACEMappingType : Swift.Equatable {}
extension NFCReader.PACEMappingType : Swift.Hashable {}
extension NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension NFCReader.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension NFCReader.Request.State : Swift.Equatable {}
extension NFCReader.Request.State : Swift.Hashable {}
extension NFCReader.AuthenticationError : Swift.Equatable {}
extension NFCReader.AuthenticationError : Swift.Hashable {}
extension NFCReader.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension NFCReader.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DocTypeEnum : Swift.RawRepresentable {}
extension NFCReader.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension NFCReader.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension NFCReader.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension NFCReader.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension NFCReader.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension NFCReader.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension NFCReader.URLEncoding.Destination : Swift.Equatable {}
extension NFCReader.URLEncoding.Destination : Swift.Hashable {}
extension NFCReader.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension NFCReader.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension NFCReader.URLEncoding.BoolEncoding : Swift.Equatable {}
extension NFCReader.URLEncoding.BoolEncoding : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.CertificateItem : Swift.RawRepresentable {}
extension NFCReader.PassportAuthenticationStatus : Swift.Equatable {}
extension NFCReader.PassportAuthenticationStatus : Swift.Hashable {}
extension NFCReader.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension NFCReader.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReader.DataGroupId : Swift.RawRepresentable {}
extension NFCReader.SwiftyJSONError : Swift.Equatable {}
extension NFCReader.SwiftyJSONError : Swift.Hashable {}
extension NFCReader.SwiftyJSONError : Swift.RawRepresentable {}
extension NFCReader.`Type` : Swift.Equatable {}
extension NFCReader.`Type` : Swift.Hashable {}
extension NFCReader.`Type` : Swift.RawRepresentable {}
extension NFCReader.writingOptionsKeys : Swift.Equatable {}
extension NFCReader.writingOptionsKeys : Swift.Hashable {}
extension NFCReader.Signature.DigestType : Swift.Equatable {}
extension NFCReader.Signature.DigestType : Swift.Hashable {}
extension NFCReader._objc_Signature.DigestType : Swift.Equatable {}
extension NFCReader._objc_Signature.DigestType : Swift.Hashable {}
extension NFCReader._objc_Signature.DigestType : Swift.RawRepresentable {}
